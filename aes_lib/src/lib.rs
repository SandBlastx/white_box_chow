#![allow(dead_code)]
pub const SBOX: [u8; 256] = [
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
];

pub const INV_SBOX: [u8; 256] = [
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
];

pub fn shift_rows(state: &mut [u8; 16]) {
    let tmp: [u8; 16] = state.clone();
    let init = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];
    let mut permutation = [0, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2, 7, 12, 1, 6, 11];
    for i in init.iter().zip(permutation.iter_mut()) {
        state[*i.0] = tmp[*i.1];
    }
}

pub fn inv_shift_rows(state: &mut [u8; 16]) {
    let tmp: [u8; 16] = state.clone();
    let init = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];
    let mut permutation = [0, 13, 10, 7, 4, 1, 14, 11, 8, 5, 2, 15, 12, 9, 6, 3];
    for i in init.iter().zip(permutation.iter_mut()) {
        state[*i.0] = tmp[*i.1];
    }
}
pub fn add_round_key(state: &mut [u8; 16], key_round: &[u8]) {
    for i in 0..16 {
        state[i] = state[i] ^ key_round[i];
    }
}
pub fn sub_bytes(state: &mut [u8; 16]) {
    for i in 0..16 {
        state[i] = SBOX[state[i] as usize];
    }
}
pub fn inv_sub_bytes(state: &mut [u8; 16]) {
    for i in 0..16 {
        state[i] = INV_SBOX[state[i] as usize];
    }
}
pub fn galois_mul(a_: u8, b_: u8) -> u8 {
    let mut p: u8 = 0;
    let mut a = a_;
    let mut b = b_;
    let mut hi_bit: u8 = 0;
    for _i in 0..8 {
        if b & 1 == 1 {
            p ^= a;
        }
        hi_bit = a & 0x80;
        a <<= 1;
        if hi_bit == 0x80 {
            a ^= 0x1b;
        }
        b >>= 1;
    }
    p
}

pub fn mix_columns(state: &mut [u8; 16]) {
    let tmp: [u8; 16] = state.clone();
    for i in 0..4 {
        state[i * 4] = galois_mul(tmp[i * 4], 2)
            ^ galois_mul(tmp[i * 4 + 1], 3)
            ^ galois_mul(tmp[i * 4 + 2], 1)
            ^ galois_mul(tmp[i * 4 + 3], 1);
        state[i * 4 + 1] = galois_mul(tmp[i * 4], 1)
            ^ galois_mul(tmp[i * 4 + 1], 2)
            ^ galois_mul(tmp[i * 4 + 2], 3)
            ^ galois_mul(tmp[i * 4 + 3], 1);
        state[i * 4 + 2] = galois_mul(tmp[i * 4], 1)
            ^ galois_mul(tmp[i * 4 + 1], 1)
            ^ galois_mul(tmp[i * 4 + 2], 2)
            ^ galois_mul(tmp[i * 4 + 3], 3);
        state[i * 4 + 3] = galois_mul(tmp[i * 4], 3)
            ^ galois_mul(tmp[i * 4 + 1], 1)
            ^ galois_mul(tmp[i * 4 + 2], 1)
            ^ galois_mul(tmp[i * 4 + 3], 2);
    }
}

pub fn inv_mix_columns(state: &mut [u8; 16]) {
    let tmp: [u8; 16] = state.clone();
    for i in 0..4 {
        state[i * 4] = galois_mul(tmp[i * 4], 14)
            ^ galois_mul(tmp[i * 4 + 1], 11)
            ^ galois_mul(tmp[i * 4 + 2], 13)
            ^ galois_mul(tmp[i * 4 + 3], 9);
        state[i * 4 + 1] = galois_mul(tmp[i * 4], 9)
            ^ galois_mul(tmp[i * 4 + 1], 14)
            ^ galois_mul(tmp[i * 4 + 2], 11)
            ^ galois_mul(tmp[i * 4 + 3], 13);
        state[i * 4 + 2] = galois_mul(tmp[i * 4], 13)
            ^ galois_mul(tmp[i * 4 + 1], 9)
            ^ galois_mul(tmp[i * 4 + 2], 14)
            ^ galois_mul(tmp[i * 4 + 3], 11);
        state[i * 4 + 3] = galois_mul(tmp[i * 4], 11)
            ^ galois_mul(tmp[i * 4 + 1], 13)
            ^ galois_mul(tmp[i * 4 + 2], 9)
            ^ galois_mul(tmp[i * 4 + 3], 14);
    }
}

pub fn rcon(mut n: u8) -> u8 {
    let mut c: u8 = 1;
    if n == 0 {
        return 0;
    }
    while n != 1 {
        c = galois_mul(c, 2);
        n -= 1;
    }
    return c;
}

pub fn rotate_galois(state: &mut [u8; 4]) {
    let tmp: u8 = state[0];
    for i in 0..3 {
        state[i] = state[i + 1];
    }
    state[3] = tmp;
}

pub fn schedule_core(input: &mut [u8; 4], n: u8) {
    rotate_galois(input);
    for i in 0..4 {
        input[i] = SBOX[input[i] as usize];
    }
    input[0] ^= rcon(n);
}
pub fn expend_key(input: &mut [u8; 176]) {
    let mut t: [u8; 4] = [0; 4];
    let mut c: u8 = 16;
    let mut n: u8 = 1;
    while c < 176 {
        for i in 0..4 {
            t[i] = input[i + (c as usize) - 4]
        }
        if c % 16 == 0 {
            schedule_core(&mut t, n);
            n += 1;
        }
        for i in 0..4 {
            input[c as usize] = input[(c as usize) - 16] ^ t[i];
            c += 1;
        }
    }
}

pub fn encryption_block(key: &[u8; 16], bytes: &[u8; 16]) -> [u8; 16] {
    let mut state: [u8; 16] = *bytes;
    let mut list_key: [u8; 176] = [0; 176];

    for i in 0..16 {
        list_key[i] = key[i];
    }

    expend_key(&mut list_key);

    add_round_key(&mut state, &list_key[0..16]);

    for i in 1..10 {
        sub_bytes(&mut state);
        shift_rows(&mut state);
        mix_columns(&mut state);
        add_round_key(&mut state, &list_key[i * 16..(i + 1) * 16]);
    }

    sub_bytes(&mut state);
    shift_rows(&mut state);
    add_round_key(&mut state, &list_key[160..176]);

    return state;
}

pub fn decryption_block(key: &[u8; 16], bytes: &[u8; 16]) -> [u8; 16] {
    let mut state: [u8; 16] = *bytes;
    let mut list_key: [u8; 176] = [0; 176];

    for i in 0..16 {
        list_key[i] = key[i];
    }

    expend_key(&mut list_key);

    add_round_key(&mut state, &list_key[160..176]);
    inv_shift_rows(&mut state);
    inv_sub_bytes(&mut state);

    for i in (1..10).rev() {
        add_round_key(&mut state, &list_key[i * 16..(i + 1) * 16]);
        inv_mix_columns(&mut state);
        inv_shift_rows(&mut state);
        inv_sub_bytes(&mut state);
    }

    add_round_key(&mut state, &list_key[0..16]);

    return state;
}

#[cfg(test)]
mod test {

    use crate::*;
    use aes::Aes128;
    #[test]
    fn test_galois_mul() {
        assert_eq!(galois_mul(3, 7), 9 as u8);
    }

    #[test]
    fn test_sub_bytes() {
        let mut state: [u8; 16] = [1; 16];
        sub_bytes(&mut state);
        inv_sub_bytes(&mut state);

        assert!(
            state.iter().zip([1; 16].iter()).all(|(a, b)| a == b),
            "Arrays are not equal"
        );
    }

    #[test]
    fn test_shift_rows() {
        let mut state: [u8; 16] = [1; 16];
        shift_rows(&mut state);
        inv_shift_rows(&mut state);
        assert!(
            state.iter().zip([1; 16].iter()).all(|(a, b)| a == b),
            "Arrays are not equal"
        );
    }

    #[test]
    fn test_mix_columns() {
        let mut state: [u8; 16] = [1; 16];
        mix_columns(&mut state);
        inv_mix_columns(&mut state);
        assert!(
            state.iter().zip([1; 16].iter()).all(|(a, b)| a == b),
            "Arrays are not equal"
        );
    }

    #[test]
    fn test_expend_key() {
        let mut key: [u8; 176] = [0xff; 176];
        let key_: [u8; 16] = [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff,
        ];
        let result: [u8; 176] = [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xe8, 0xe9, 0xe9, 0xe9, 0x17, 0x16, 0x16, 0x16, 0xe8, 0xe9, 0xe9, 0xe9,
            0x17, 0x16, 0x16, 0x16, 0xad, 0xae, 0xae, 0x19, 0xba, 0xb8, 0xb8, 0x0f, 0x52, 0x51,
            0x51, 0xe6, 0x45, 0x47, 0x47, 0xf0, 0x09, 0x0e, 0x22, 0x77, 0xb3, 0xb6, 0x9a, 0x78,
            0xe1, 0xe7, 0xcb, 0x9e, 0xa4, 0xa0, 0x8c, 0x6e, 0xe1, 0x6a, 0xbd, 0x3e, 0x52, 0xdc,
            0x27, 0x46, 0xb3, 0x3b, 0xec, 0xd8, 0x17, 0x9b, 0x60, 0xb6, 0xe5, 0xba, 0xf3, 0xce,
            0xb7, 0x66, 0xd4, 0x88, 0x04, 0x5d, 0x38, 0x50, 0x13, 0xc6, 0x58, 0xe6, 0x71, 0xd0,
            0x7d, 0xb3, 0xc6, 0xb6, 0xa9, 0x3b, 0xc2, 0xeb, 0x91, 0x6b, 0xd1, 0x2d, 0xc9, 0x8d,
            0xe9, 0x0d, 0x20, 0x8d, 0x2f, 0xbb, 0x89, 0xb6, 0xed, 0x50, 0x18, 0xdd, 0x3c, 0x7d,
            0xd1, 0x50, 0x96, 0x33, 0x73, 0x66, 0xb9, 0x88, 0xfa, 0xd0, 0x54, 0xd8, 0xe2, 0x0d,
            0x68, 0xa5, 0x33, 0x5d, 0x8b, 0xf0, 0x3f, 0x23, 0x32, 0x78, 0xc5, 0xf3, 0x66, 0xa0,
            0x27, 0xfe, 0x0e, 0x05, 0x14, 0xa3, 0xd6, 0x0a, 0x35, 0x88, 0xe4, 0x72, 0xf0, 0x7b,
            0x82, 0xd2, 0xd7, 0x85, 0x8c, 0xd7, 0xc3, 0x26,
        ];

        expend_key(&mut key);
        assert!(
            key.iter().zip(result.iter()).all(|(a, b)| a == b),
            "Arrays are not equal"
        );
    }

    #[test]
    fn test_encryption_block() {
        let key: [u8; 16] = [
            0x47, 0x47, 0xf0, 0x09, 0x0e, 0x22, 0x77, 0xb3, 0xb6, 0x9a, 0x78, 0xe1, 0xe7, 0xcb,
            0x9e, 0x3f,
        ];
        let message: [u8; 16] = [
            0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x20, 0x3a, 0x29,
            0x20, 0x2e,
        ];

        let encr = encryption_block(&key, &message);
        let decrypt = decryption_block(&key, &encr);

        assert!(
            message.iter().zip(decrypt.iter()).all(|(a, b)| a == b),
            "Arrays are not equal"
        );
    }
}
